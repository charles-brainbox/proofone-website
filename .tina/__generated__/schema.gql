# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String): AuthorConnection!
  navbar(relativePath: String): Navbar!
  navbarConnection(before: String, after: String, first: Float, last: Float, sort: String): NavbarConnection!
  footer(relativePath: String): Footer!
  footerConnection(before: String, after: String, first: Float, last: Float, sort: String): FooterConnection!
  name(relativePath: String): Name!
  nameConnection(before: String, after: String, first: Float, last: Float, sort: String): NameConnection!
  formcallback(relativePath: String): Formcallback!
  formcallbackConnection(before: String, after: String, first: Float, last: Float, sort: String): FormcallbackConnection!
  impressum(relativePath: String): Impressum!
  impressumConnection(before: String, after: String, first: Float, last: Float, sort: String): ImpressumConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Author | Navbar | Footer | Name | Formcallback | Impressum

type Author implements Node & Document {
  name: String
  avatar: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type NavbarNavbarLogo {
  link: String
  logo: String
}

type NavbarNavbarNavitems {
  menutitle: String
  menulink: String
}

type NavbarNavbarNavbuttons {
  buttontitle: String
  buttonlink: String
}

type NavbarNavbar {
  logo: [NavbarNavbarLogo]
  navitems: [NavbarNavbarNavitems]
  navbuttons: [NavbarNavbarNavbuttons]
}

type Navbar implements Node & Document {
  navbar: NavbarNavbar
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type NavbarConnectionEdges {
  cursor: String!
  node: Navbar
}

type NavbarConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NavbarConnectionEdges]
}

type FooterAddress {
  title: String
  companyname: String
  companystreet: String
  companycity: String
  companycountry: String
}

type FooterOtherdataBody {
  item: String
  itemlink: String
  itemtag: String
}

type FooterOtherdata {
  title: String
  body: [FooterOtherdataBody]
}

type Footer implements Node & Document {
  logo: String
  address: FooterAddress
  otherdata: [FooterOtherdata]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type FooterConnectionEdges {
  cursor: String!
  node: Footer
}

type FooterConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [FooterConnectionEdges]
}

type NameHeroHerobutton {
  buttontitle: String
  buttonlink: String
}

type NameHero {
  herotitle: String
  sectionid: String
  herosubtitle: String
  herodescription: JSON
  herobutton: [NameHeroHerobutton]
  heroimage: String
}

type NameUsecasesUsecases {
  title: String
  description: JSON
}

type NameUsecases {
  sectiontitle: String
  sectionid: String
  sideimage: String
  usecases: [NameUsecasesUsecases]
}

type NameBanners {
  title: String
  content: JSON
  bannerImage: String
}

type NameFeaturesFeatures {
  icon: String
  title: String
  subtitle: String
  description: JSON
}

type NameFeatures {
  sectiontitle: String
  sectionid: String
  topimage: String
  features: [NameFeaturesFeatures]
}

type NameServicestestServices {
  title: String
  description: JSON
}

type NameServicestest {
  sectiontitle: String
  services: [NameServicestestServices]
}

type NameOurapproachOurapproach {
  title: String
  description: JSON
}

type NameOurapproach {
  sectiontitle: String
  sectionid: String
  sideimage: String
  ourapproach: [NameOurapproachOurapproach]
}

type NamePotentialuserPotentialusersButton {
  buttontext: String
  buttonlink: String
}

type NamePotentialuserPotentialusers {
  image: String
  title: String
  description: JSON
  button: NamePotentialuserPotentialusersButton
}

type NamePotentialuser {
  sectiontitle: String
  sectionid: String
  potentialusers: [NamePotentialuserPotentialusers]
}

type NameOtherproductsProductlogo {
  productlogo: String
}

type NameOtherproducts {
  productlogo: [NameOtherproductsProductlogo]
}

type NameFooterctoCtobutton {
  buttontext: String
  buttonlink: String
}

type NameFootercto {
  cto: String
  sectionid: String
  ctobutton: NameFooterctoCtobutton
}

type Name implements Node & Document {
  hero: NameHero
  usecases: NameUsecases
  banners: [NameBanners]
  features: NameFeatures
  servicestest: NameServicestest
  ourapproach: NameOurapproach
  potentialuser: NamePotentialuser
  otherproducts: NameOtherproducts
  footercto: NameFootercto
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type NameConnectionEdges {
  cursor: String!
  node: Name
}

type NameConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NameConnectionEdges]
}

type FormcallbackFormfield {
  name: String
  placeholder: String
  error: String
}

type Formcallback implements Node & Document {
  title: JSON
  formfield: [FormcallbackFormfield]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type FormcallbackConnectionEdges {
  cursor: String!
  node: Formcallback
}

type FormcallbackConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [FormcallbackConnectionEdges]
}

type Impressum implements Node & Document {
  title: String
  description: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type ImpressumConnectionEdges {
  cursor: String!
  node: Impressum
}

type ImpressumConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ImpressumConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updateNavbar(relativePath: String!, params: NavbarMutation!): Navbar!
  createNavbar(relativePath: String!, params: NavbarMutation!): Navbar!
  updateFooter(relativePath: String!, params: FooterMutation!): Footer!
  createFooter(relativePath: String!, params: FooterMutation!): Footer!
  updateName(relativePath: String!, params: NameMutation!): Name!
  createName(relativePath: String!, params: NameMutation!): Name!
  updateFormcallback(relativePath: String!, params: FormcallbackMutation!): Formcallback!
  createFormcallback(relativePath: String!, params: FormcallbackMutation!): Formcallback!
  updateImpressum(relativePath: String!, params: ImpressumMutation!): Impressum!
  createImpressum(relativePath: String!, params: ImpressumMutation!): Impressum!
}

input DocumentMutation {
  author: AuthorMutation
  navbar: NavbarMutation
  footer: FooterMutation
  name: NameMutation
  formcallback: FormcallbackMutation
  impressum: ImpressumMutation
}

input AuthorMutation {
  name: String
  avatar: String
}

input NavbarNavbarLogoMutation {
  link: String
  logo: String
}

input NavbarNavbarNavitemsMutation {
  menutitle: String
  menulink: String
}

input NavbarNavbarNavbuttonsMutation {
  buttontitle: String
  buttonlink: String
}

input NavbarNavbarMutation {
  logo: [NavbarNavbarLogoMutation]
  navitems: [NavbarNavbarNavitemsMutation]
  navbuttons: [NavbarNavbarNavbuttonsMutation]
}

input NavbarMutation {
  navbar: NavbarNavbarMutation
}

input FooterAddressMutation {
  title: String
  companyname: String
  companystreet: String
  companycity: String
  companycountry: String
}

input FooterOtherdataBodyMutation {
  item: String
  itemlink: String
  itemtag: String
}

input FooterOtherdataMutation {
  title: String
  body: [FooterOtherdataBodyMutation]
}

input FooterMutation {
  logo: String
  address: FooterAddressMutation
  otherdata: [FooterOtherdataMutation]
}

input NameHeroHerobuttonMutation {
  buttontitle: String
  buttonlink: String
}

input NameHeroMutation {
  herotitle: String
  sectionid: String
  herosubtitle: String
  herodescription: JSON
  herobutton: [NameHeroHerobuttonMutation]
  heroimage: String
}

input NameUsecasesUsecasesMutation {
  title: String
  description: JSON
}

input NameUsecasesMutation {
  sectiontitle: String
  sectionid: String
  sideimage: String
  usecases: [NameUsecasesUsecasesMutation]
}

input NameBannersMutation {
  title: String
  content: JSON
  bannerImage: String
}

input NameFeaturesFeaturesMutation {
  icon: String
  title: String
  subtitle: String
  description: JSON
}

input NameFeaturesMutation {
  sectiontitle: String
  sectionid: String
  topimage: String
  features: [NameFeaturesFeaturesMutation]
}

input NameServicestestServicesMutation {
  title: String
  description: JSON
}

input NameServicestestMutation {
  sectiontitle: String
  services: [NameServicestestServicesMutation]
}

input NameOurapproachOurapproachMutation {
  title: String
  description: JSON
}

input NameOurapproachMutation {
  sectiontitle: String
  sectionid: String
  sideimage: String
  ourapproach: [NameOurapproachOurapproachMutation]
}

input NamePotentialuserPotentialusersButtonMutation {
  buttontext: String
  buttonlink: String
}

input NamePotentialuserPotentialusersMutation {
  image: String
  title: String
  description: JSON
  button: NamePotentialuserPotentialusersButtonMutation
}

input NamePotentialuserMutation {
  sectiontitle: String
  sectionid: String
  potentialusers: [NamePotentialuserPotentialusersMutation]
}

input NameOtherproductsProductlogoMutation {
  productlogo: String
}

input NameOtherproductsMutation {
  productlogo: [NameOtherproductsProductlogoMutation]
}

input NameFooterctoCtobuttonMutation {
  buttontext: String
  buttonlink: String
}

input NameFooterctoMutation {
  cto: String
  sectionid: String
  ctobutton: NameFooterctoCtobuttonMutation
}

input NameMutation {
  hero: NameHeroMutation
  usecases: NameUsecasesMutation
  banners: [NameBannersMutation]
  features: NameFeaturesMutation
  servicestest: NameServicestestMutation
  ourapproach: NameOurapproachMutation
  potentialuser: NamePotentialuserMutation
  otherproducts: NameOtherproductsMutation
  footercto: NameFooterctoMutation
}

input FormcallbackFormfieldMutation {
  name: String
  placeholder: String
  error: String
}

input FormcallbackMutation {
  title: JSON
  formfield: [FormcallbackFormfieldMutation]
}

input ImpressumMutation {
  title: String
  description: JSON
}

schema {
  query: Query
  mutation: Mutation
}
  