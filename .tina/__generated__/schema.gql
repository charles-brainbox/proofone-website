# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String): AuthorConnection!
  name(relativePath: String): Name!
  nameConnection(before: String, after: String, first: Float, last: Float, sort: String): NameConnection!
  samplehome(relativePath: String): Samplehome!
  samplehomeConnection(before: String, after: String, first: Float, last: Float, sort: String): SamplehomeConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Author | Name | Samplehome

type Author implements Node & Document {
  name: String
  avatar: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type NameNavbarNavitems {
  menutitle: String
  menulink: String
}

type NameNavbarNavbuttons {
  buttontitle: String
  buttonlink: String
}

type NameNavbar {
  logo: String
  navitems: [NameNavbarNavitems]
  navbuttons: [NameNavbarNavbuttons]
}

type NameHeroHerobutton {
  buttontitle: String
  buttonlink: String
}

type NameHero {
  herotitle: String
  herosubtitle: String
  herodescription: JSON
  herobutton: [NameHeroHerobutton]
  heroimage: String
}

type NameFeaturesFeatures {
  icon: String
  title: String
  subtitle: String
  description: JSON
}

type NameFeatures {
  sectiontitle: String
  features: [NameFeaturesFeatures]
}

type NamePotentialuserPotentialusersButton {
  buttontext: String
  buttonlink: String
}

type NamePotentialuserPotentialusers {
  image: String
  title: String
  description: JSON
  button: NamePotentialuserPotentialusersButton
}

type NamePotentialuser {
  sectiontitle: String
  potentialusers: [NamePotentialuserPotentialusers]
}

type NameOtherproductsProductlogo {
  productlogo: String
}

type NameOtherproducts {
  productlogo: [NameOtherproductsProductlogo]
}

type NameFooterctoCtobutton {
  buttontext: String
  buttonlink: String
}

type NameFootercto {
  cto: String
  ctobutton: NameFooterctoCtobutton
}

type NameFooterAddress {
  title: String
  companyname: String
  companystreet: String
  companycity: String
  companycountry: String
}

type NameFooterOtherdataBody {
  item: String
  itemlink: String
}

type NameFooterOtherdata {
  title: String
  body: [NameFooterOtherdataBody]
}

type NameFooter {
  logo: String
  address: NameFooterAddress
  otherdata: [NameFooterOtherdata]
}

type Name implements Node & Document {
  navbar: NameNavbar
  hero: NameHero
  features: NameFeatures
  potentialuser: NamePotentialuser
  otherproducts: NameOtherproducts
  footercto: NameFootercto
  footer: NameFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type NameConnectionEdges {
  cursor: String!
  node: Name
}

type NameConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NameConnectionEdges]
}

type SamplehomeNavbarNavitems {
  menutitle: String
  menulink: String
}

type SamplehomeNavbarNavbuttons {
  buttontitle: String
  buttonlink: String
}

type SamplehomeNavbar {
  logo: String
  navitems: [SamplehomeNavbarNavitems]
  navbuttons: [SamplehomeNavbarNavbuttons]
}

type SamplehomeHeroHerobutton {
  buttontitle: String
  buttonlink: String
}

type SamplehomeHero {
  herotitle: String
  herosubtitle: String
  herodescription: JSON
  herobutton: [SamplehomeHeroHerobutton]
  heroimage: String
}

type SamplehomeFeaturesFeatures {
  icon: String
  title: String
  subtitle: String
  description: JSON
}

type SamplehomeFeatures {
  sectiontitle: String
  features: [SamplehomeFeaturesFeatures]
}

type SamplehomePotentialuserPotentialusersUsers {
  image: String
  title: String
  description: JSON
}

type SamplehomePotentialuserPotentialusers {
  users: SamplehomePotentialuserPotentialusersUsers
}

type SamplehomePotentialuser {
  sectiontitle: String
  potentialusers: [SamplehomePotentialuserPotentialusers]
}

type SamplehomeOtherproductsProductlogo {
  productlogo: String
}

type SamplehomeOtherproducts {
  productlogo: [SamplehomeOtherproductsProductlogo]
}

type SamplehomeFooterctoCtobutton {
  buttontext: String
  buttonlink: String
}

type SamplehomeFootercto {
  cto: String
  ctobutton: SamplehomeFooterctoCtobutton
}

type SamplehomeFooterAddress {
  title: String
  companyname: String
  companystreet: String
  companycity: String
  companycountry: String
}

type SamplehomeFooterOtherdataBody {
  item: String
  itemlink: String
}

type SamplehomeFooterOtherdata {
  title: String
  body: [SamplehomeFooterOtherdataBody]
}

type SamplehomeFooter {
  address: SamplehomeFooterAddress
  otherdata: [SamplehomeFooterOtherdata]
}

type Samplehome implements Node & Document {
  navbar: SamplehomeNavbar
  hero: SamplehomeHero
  features: SamplehomeFeatures
  potentialuser: SamplehomePotentialuser
  otherproducts: SamplehomeOtherproducts
  footercto: SamplehomeFootercto
  footer: SamplehomeFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type SamplehomeConnectionEdges {
  cursor: String!
  node: Samplehome
}

type SamplehomeConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SamplehomeConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updateName(relativePath: String!, params: NameMutation!): Name!
  createName(relativePath: String!, params: NameMutation!): Name!
  updateSamplehome(relativePath: String!, params: SamplehomeMutation!): Samplehome!
  createSamplehome(relativePath: String!, params: SamplehomeMutation!): Samplehome!
}

input DocumentMutation {
  author: AuthorMutation
  name: NameMutation
  samplehome: SamplehomeMutation
}

input AuthorMutation {
  name: String
  avatar: String
}

input NameNavbarNavitemsMutation {
  menutitle: String
  menulink: String
}

input NameNavbarNavbuttonsMutation {
  buttontitle: String
  buttonlink: String
}

input NameNavbarMutation {
  logo: String
  navitems: [NameNavbarNavitemsMutation]
  navbuttons: [NameNavbarNavbuttonsMutation]
}

input NameHeroHerobuttonMutation {
  buttontitle: String
  buttonlink: String
}

input NameHeroMutation {
  herotitle: String
  herosubtitle: String
  herodescription: JSON
  herobutton: [NameHeroHerobuttonMutation]
  heroimage: String
}

input NameFeaturesFeaturesMutation {
  icon: String
  title: String
  subtitle: String
  description: JSON
}

input NameFeaturesMutation {
  sectiontitle: String
  features: [NameFeaturesFeaturesMutation]
}

input NamePotentialuserPotentialusersButtonMutation {
  buttontext: String
  buttonlink: String
}

input NamePotentialuserPotentialusersMutation {
  image: String
  title: String
  description: JSON
  button: NamePotentialuserPotentialusersButtonMutation
}

input NamePotentialuserMutation {
  sectiontitle: String
  potentialusers: [NamePotentialuserPotentialusersMutation]
}

input NameOtherproductsProductlogoMutation {
  productlogo: String
}

input NameOtherproductsMutation {
  productlogo: [NameOtherproductsProductlogoMutation]
}

input NameFooterctoCtobuttonMutation {
  buttontext: String
  buttonlink: String
}

input NameFooterctoMutation {
  cto: String
  ctobutton: NameFooterctoCtobuttonMutation
}

input NameFooterAddressMutation {
  title: String
  companyname: String
  companystreet: String
  companycity: String
  companycountry: String
}

input NameFooterOtherdataBodyMutation {
  item: String
  itemlink: String
}

input NameFooterOtherdataMutation {
  title: String
  body: [NameFooterOtherdataBodyMutation]
}

input NameFooterMutation {
  logo: String
  address: NameFooterAddressMutation
  otherdata: [NameFooterOtherdataMutation]
}

input NameMutation {
  navbar: NameNavbarMutation
  hero: NameHeroMutation
  features: NameFeaturesMutation
  potentialuser: NamePotentialuserMutation
  otherproducts: NameOtherproductsMutation
  footercto: NameFooterctoMutation
  footer: NameFooterMutation
}

input SamplehomeNavbarNavitemsMutation {
  menutitle: String
  menulink: String
}

input SamplehomeNavbarNavbuttonsMutation {
  buttontitle: String
  buttonlink: String
}

input SamplehomeNavbarMutation {
  logo: String
  navitems: [SamplehomeNavbarNavitemsMutation]
  navbuttons: [SamplehomeNavbarNavbuttonsMutation]
}

input SamplehomeHeroHerobuttonMutation {
  buttontitle: String
  buttonlink: String
}

input SamplehomeHeroMutation {
  herotitle: String
  herosubtitle: String
  herodescription: JSON
  herobutton: [SamplehomeHeroHerobuttonMutation]
  heroimage: String
}

input SamplehomeFeaturesFeaturesMutation {
  icon: String
  title: String
  subtitle: String
  description: JSON
}

input SamplehomeFeaturesMutation {
  sectiontitle: String
  features: [SamplehomeFeaturesFeaturesMutation]
}

input SamplehomePotentialuserPotentialusersUsersMutation {
  image: String
  title: String
  description: JSON
}

input SamplehomePotentialuserPotentialusersMutation {
  users: SamplehomePotentialuserPotentialusersUsersMutation
}

input SamplehomePotentialuserMutation {
  sectiontitle: String
  potentialusers: [SamplehomePotentialuserPotentialusersMutation]
}

input SamplehomeOtherproductsProductlogoMutation {
  productlogo: String
}

input SamplehomeOtherproductsMutation {
  productlogo: [SamplehomeOtherproductsProductlogoMutation]
}

input SamplehomeFooterctoCtobuttonMutation {
  buttontext: String
  buttonlink: String
}

input SamplehomeFooterctoMutation {
  cto: String
  ctobutton: SamplehomeFooterctoCtobuttonMutation
}

input SamplehomeFooterAddressMutation {
  title: String
  companyname: String
  companystreet: String
  companycity: String
  companycountry: String
}

input SamplehomeFooterOtherdataBodyMutation {
  item: String
  itemlink: String
}

input SamplehomeFooterOtherdataMutation {
  title: String
  body: [SamplehomeFooterOtherdataBodyMutation]
}

input SamplehomeFooterMutation {
  address: SamplehomeFooterAddressMutation
  otherdata: [SamplehomeFooterOtherdataMutation]
}

input SamplehomeMutation {
  navbar: SamplehomeNavbarMutation
  hero: SamplehomeHeroMutation
  features: SamplehomeFeaturesMutation
  potentialuser: SamplehomePotentialuserMutation
  otherproducts: SamplehomeOtherproductsMutation
  footercto: SamplehomeFooterctoMutation
  footer: SamplehomeFooterMutation
}

schema {
  query: Query
  mutation: Mutation
}
  