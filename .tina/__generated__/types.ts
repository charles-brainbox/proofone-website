//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
export function gql(strings: TemplateStringsArray, ...args: string[]): string {
  let str = ''
  strings.forEach((string, i) => {
    str += string + (args[i] || '')
  })
  return str
}
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  author: Author;
  authorConnection: AuthorConnection;
  navbar: Navbar;
  navbarConnection: NavbarConnection;
  footer: Footer;
  footerConnection: FooterConnection;
  name: Name;
  nameConnection: NameConnection;
  formcallback: Formcallback;
  formcallbackConnection: FormcallbackConnection;
  impressum: Impressum;
  impressumConnection: ImpressumConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryAuthorArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryAuthorConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryNavbarArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryNavbarConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryFooterArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryFooterConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryNameArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryNameConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryFormcallbackArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryFormcallbackConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryImpressumArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryImpressumConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};

export type DocumentNode = Author | Navbar | Footer | Name | Formcallback | Impressum;

export type Author = Node & Document & {
  __typename?: 'Author';
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type AuthorConnectionEdges = {
  __typename?: 'AuthorConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Author>;
};

export type AuthorConnection = Connection & {
  __typename?: 'AuthorConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<AuthorConnectionEdges>>>;
};

export type NavbarNavbarLogo = {
  __typename?: 'NavbarNavbarLogo';
  link?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
};

export type NavbarNavbarNavitems = {
  __typename?: 'NavbarNavbarNavitems';
  menutitle?: Maybe<Scalars['String']>;
  menulink?: Maybe<Scalars['String']>;
};

export type NavbarNavbarNavbuttons = {
  __typename?: 'NavbarNavbarNavbuttons';
  buttontitle?: Maybe<Scalars['String']>;
  buttonlink?: Maybe<Scalars['String']>;
};

export type NavbarNavbar = {
  __typename?: 'NavbarNavbar';
  logo?: Maybe<Array<Maybe<NavbarNavbarLogo>>>;
  navitems?: Maybe<Array<Maybe<NavbarNavbarNavitems>>>;
  navbuttons?: Maybe<Array<Maybe<NavbarNavbarNavbuttons>>>;
};

export type Navbar = Node & Document & {
  __typename?: 'Navbar';
  navbar?: Maybe<NavbarNavbar>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type NavbarConnectionEdges = {
  __typename?: 'NavbarConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Navbar>;
};

export type NavbarConnection = Connection & {
  __typename?: 'NavbarConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<NavbarConnectionEdges>>>;
};

export type FooterAddress = {
  __typename?: 'FooterAddress';
  title?: Maybe<Scalars['String']>;
  companyname?: Maybe<Scalars['String']>;
  companystreet?: Maybe<Scalars['String']>;
  companycity?: Maybe<Scalars['String']>;
  companycountry?: Maybe<Scalars['String']>;
};

export type FooterOtherdataBody = {
  __typename?: 'FooterOtherdataBody';
  item?: Maybe<Scalars['String']>;
  itemlink?: Maybe<Scalars['String']>;
  itemtag?: Maybe<Scalars['String']>;
};

export type FooterOtherdata = {
  __typename?: 'FooterOtherdata';
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Array<Maybe<FooterOtherdataBody>>>;
};

export type Footer = Node & Document & {
  __typename?: 'Footer';
  logo?: Maybe<Scalars['String']>;
  address?: Maybe<FooterAddress>;
  otherdata?: Maybe<Array<Maybe<FooterOtherdata>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type FooterConnectionEdges = {
  __typename?: 'FooterConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Footer>;
};

export type FooterConnection = Connection & {
  __typename?: 'FooterConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<FooterConnectionEdges>>>;
};

export type NameHeroHerobutton = {
  __typename?: 'NameHeroHerobutton';
  buttontitle?: Maybe<Scalars['String']>;
  buttonlink?: Maybe<Scalars['String']>;
};

export type NameHero = {
  __typename?: 'NameHero';
  herotitle?: Maybe<Scalars['String']>;
  sectionid?: Maybe<Scalars['String']>;
  herosubtitle?: Maybe<Scalars['String']>;
  herodescription?: Maybe<Scalars['JSON']>;
  herobutton?: Maybe<Array<Maybe<NameHeroHerobutton>>>;
  heroimage?: Maybe<Scalars['String']>;
};

export type NameUsecasesUsecases = {
  __typename?: 'NameUsecasesUsecases';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
};

export type NameUsecases = {
  __typename?: 'NameUsecases';
  sectiontitle?: Maybe<Scalars['String']>;
  sectionid?: Maybe<Scalars['String']>;
  sideimage?: Maybe<Scalars['String']>;
  usecases?: Maybe<Array<Maybe<NameUsecasesUsecases>>>;
};

export type NameBanners = {
  __typename?: 'NameBanners';
  title?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['JSON']>;
  bannerImage?: Maybe<Scalars['String']>;
};

export type NameFeaturesFeatures = {
  __typename?: 'NameFeaturesFeatures';
  icon?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
};

export type NameFeatures = {
  __typename?: 'NameFeatures';
  sectiontitle?: Maybe<Scalars['String']>;
  sectionid?: Maybe<Scalars['String']>;
  topimage?: Maybe<Scalars['String']>;
  features?: Maybe<Array<Maybe<NameFeaturesFeatures>>>;
};

export type NameServicestestServices = {
  __typename?: 'NameServicestestServices';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
};

export type NameServicestest = {
  __typename?: 'NameServicestest';
  sectiontitle?: Maybe<Scalars['String']>;
  services?: Maybe<Array<Maybe<NameServicestestServices>>>;
};

export type NameOurapproachOurapproach = {
  __typename?: 'NameOurapproachOurapproach';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
};

export type NameOurapproach = {
  __typename?: 'NameOurapproach';
  sectiontitle?: Maybe<Scalars['String']>;
  sectionid?: Maybe<Scalars['String']>;
  sideimage?: Maybe<Scalars['String']>;
  ourapproach?: Maybe<Array<Maybe<NameOurapproachOurapproach>>>;
};

export type NamePotentialuserPotentialusersButton = {
  __typename?: 'NamePotentialuserPotentialusersButton';
  buttontext?: Maybe<Scalars['String']>;
  buttonlink?: Maybe<Scalars['String']>;
};

export type NamePotentialuserPotentialusers = {
  __typename?: 'NamePotentialuserPotentialusers';
  image?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
  button?: Maybe<NamePotentialuserPotentialusersButton>;
};

export type NamePotentialuser = {
  __typename?: 'NamePotentialuser';
  sectiontitle?: Maybe<Scalars['String']>;
  sectionid?: Maybe<Scalars['String']>;
  potentialusers?: Maybe<Array<Maybe<NamePotentialuserPotentialusers>>>;
};

export type NameOtherproductsProductlogo = {
  __typename?: 'NameOtherproductsProductlogo';
  productlogo?: Maybe<Scalars['String']>;
};

export type NameOtherproducts = {
  __typename?: 'NameOtherproducts';
  productlogo?: Maybe<Array<Maybe<NameOtherproductsProductlogo>>>;
};

export type NameFooterctoCtobutton = {
  __typename?: 'NameFooterctoCtobutton';
  buttontext?: Maybe<Scalars['String']>;
  buttonlink?: Maybe<Scalars['String']>;
};

export type NameFootercto = {
  __typename?: 'NameFootercto';
  cto?: Maybe<Scalars['String']>;
  sectionid?: Maybe<Scalars['String']>;
  ctobutton?: Maybe<NameFooterctoCtobutton>;
};

export type Name = Node & Document & {
  __typename?: 'Name';
  hero?: Maybe<NameHero>;
  usecases?: Maybe<NameUsecases>;
  banners?: Maybe<Array<Maybe<NameBanners>>>;
  features?: Maybe<NameFeatures>;
  servicestest?: Maybe<NameServicestest>;
  ourapproach?: Maybe<NameOurapproach>;
  potentialuser?: Maybe<NamePotentialuser>;
  otherproducts?: Maybe<NameOtherproducts>;
  footercto?: Maybe<NameFootercto>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type NameConnectionEdges = {
  __typename?: 'NameConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Name>;
};

export type NameConnection = Connection & {
  __typename?: 'NameConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<NameConnectionEdges>>>;
};

export type FormcallbackFormfield = {
  __typename?: 'FormcallbackFormfield';
  name?: Maybe<Scalars['String']>;
  placeholder?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
};

export type Formcallback = Node & Document & {
  __typename?: 'Formcallback';
  title?: Maybe<Scalars['JSON']>;
  formfield?: Maybe<Array<Maybe<FormcallbackFormfield>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type FormcallbackConnectionEdges = {
  __typename?: 'FormcallbackConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Formcallback>;
};

export type FormcallbackConnection = Connection & {
  __typename?: 'FormcallbackConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<FormcallbackConnectionEdges>>>;
};

export type Impressum = Node & Document & {
  __typename?: 'Impressum';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type ImpressumConnectionEdges = {
  __typename?: 'ImpressumConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Impressum>;
};

export type ImpressumConnection = Connection & {
  __typename?: 'ImpressumConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ImpressumConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateAuthor: Author;
  createAuthor: Author;
  updateNavbar: Navbar;
  createNavbar: Navbar;
  updateFooter: Footer;
  createFooter: Footer;
  updateName: Name;
  createName: Name;
  updateFormcallback: Formcallback;
  createFormcallback: Formcallback;
  updateImpressum: Impressum;
  createImpressum: Impressum;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateAuthorArgs = {
  relativePath: Scalars['String'];
  params: AuthorMutation;
};


export type MutationCreateAuthorArgs = {
  relativePath: Scalars['String'];
  params: AuthorMutation;
};


export type MutationUpdateNavbarArgs = {
  relativePath: Scalars['String'];
  params: NavbarMutation;
};


export type MutationCreateNavbarArgs = {
  relativePath: Scalars['String'];
  params: NavbarMutation;
};


export type MutationUpdateFooterArgs = {
  relativePath: Scalars['String'];
  params: FooterMutation;
};


export type MutationCreateFooterArgs = {
  relativePath: Scalars['String'];
  params: FooterMutation;
};


export type MutationUpdateNameArgs = {
  relativePath: Scalars['String'];
  params: NameMutation;
};


export type MutationCreateNameArgs = {
  relativePath: Scalars['String'];
  params: NameMutation;
};


export type MutationUpdateFormcallbackArgs = {
  relativePath: Scalars['String'];
  params: FormcallbackMutation;
};


export type MutationCreateFormcallbackArgs = {
  relativePath: Scalars['String'];
  params: FormcallbackMutation;
};


export type MutationUpdateImpressumArgs = {
  relativePath: Scalars['String'];
  params: ImpressumMutation;
};


export type MutationCreateImpressumArgs = {
  relativePath: Scalars['String'];
  params: ImpressumMutation;
};

export type DocumentMutation = {
  author?: InputMaybe<AuthorMutation>;
  navbar?: InputMaybe<NavbarMutation>;
  footer?: InputMaybe<FooterMutation>;
  name?: InputMaybe<NameMutation>;
  formcallback?: InputMaybe<FormcallbackMutation>;
  impressum?: InputMaybe<ImpressumMutation>;
};

export type AuthorMutation = {
  name?: InputMaybe<Scalars['String']>;
  avatar?: InputMaybe<Scalars['String']>;
};

export type NavbarNavbarLogoMutation = {
  link?: InputMaybe<Scalars['String']>;
  logo?: InputMaybe<Scalars['String']>;
};

export type NavbarNavbarNavitemsMutation = {
  menutitle?: InputMaybe<Scalars['String']>;
  menulink?: InputMaybe<Scalars['String']>;
};

export type NavbarNavbarNavbuttonsMutation = {
  buttontitle?: InputMaybe<Scalars['String']>;
  buttonlink?: InputMaybe<Scalars['String']>;
};

export type NavbarNavbarMutation = {
  logo?: InputMaybe<Array<InputMaybe<NavbarNavbarLogoMutation>>>;
  navitems?: InputMaybe<Array<InputMaybe<NavbarNavbarNavitemsMutation>>>;
  navbuttons?: InputMaybe<Array<InputMaybe<NavbarNavbarNavbuttonsMutation>>>;
};

export type NavbarMutation = {
  navbar?: InputMaybe<NavbarNavbarMutation>;
};

export type FooterAddressMutation = {
  title?: InputMaybe<Scalars['String']>;
  companyname?: InputMaybe<Scalars['String']>;
  companystreet?: InputMaybe<Scalars['String']>;
  companycity?: InputMaybe<Scalars['String']>;
  companycountry?: InputMaybe<Scalars['String']>;
};

export type FooterOtherdataBodyMutation = {
  item?: InputMaybe<Scalars['String']>;
  itemlink?: InputMaybe<Scalars['String']>;
  itemtag?: InputMaybe<Scalars['String']>;
};

export type FooterOtherdataMutation = {
  title?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Array<InputMaybe<FooterOtherdataBodyMutation>>>;
};

export type FooterMutation = {
  logo?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<FooterAddressMutation>;
  otherdata?: InputMaybe<Array<InputMaybe<FooterOtherdataMutation>>>;
};

export type NameHeroHerobuttonMutation = {
  buttontitle?: InputMaybe<Scalars['String']>;
  buttonlink?: InputMaybe<Scalars['String']>;
};

export type NameHeroMutation = {
  herotitle?: InputMaybe<Scalars['String']>;
  sectionid?: InputMaybe<Scalars['String']>;
  herosubtitle?: InputMaybe<Scalars['String']>;
  herodescription?: InputMaybe<Scalars['JSON']>;
  herobutton?: InputMaybe<Array<InputMaybe<NameHeroHerobuttonMutation>>>;
  heroimage?: InputMaybe<Scalars['String']>;
};

export type NameUsecasesUsecasesMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['JSON']>;
};

export type NameUsecasesMutation = {
  sectiontitle?: InputMaybe<Scalars['String']>;
  sectionid?: InputMaybe<Scalars['String']>;
  sideimage?: InputMaybe<Scalars['String']>;
  usecases?: InputMaybe<Array<InputMaybe<NameUsecasesUsecasesMutation>>>;
};

export type NameBannersMutation = {
  title?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['JSON']>;
  bannerImage?: InputMaybe<Scalars['String']>;
};

export type NameFeaturesFeaturesMutation = {
  icon?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['JSON']>;
};

export type NameFeaturesMutation = {
  sectiontitle?: InputMaybe<Scalars['String']>;
  sectionid?: InputMaybe<Scalars['String']>;
  topimage?: InputMaybe<Scalars['String']>;
  features?: InputMaybe<Array<InputMaybe<NameFeaturesFeaturesMutation>>>;
};

export type NameServicestestServicesMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['JSON']>;
};

export type NameServicestestMutation = {
  sectiontitle?: InputMaybe<Scalars['String']>;
  services?: InputMaybe<Array<InputMaybe<NameServicestestServicesMutation>>>;
};

export type NameOurapproachOurapproachMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['JSON']>;
};

export type NameOurapproachMutation = {
  sectiontitle?: InputMaybe<Scalars['String']>;
  sectionid?: InputMaybe<Scalars['String']>;
  sideimage?: InputMaybe<Scalars['String']>;
  ourapproach?: InputMaybe<Array<InputMaybe<NameOurapproachOurapproachMutation>>>;
};

export type NamePotentialuserPotentialusersButtonMutation = {
  buttontext?: InputMaybe<Scalars['String']>;
  buttonlink?: InputMaybe<Scalars['String']>;
};

export type NamePotentialuserPotentialusersMutation = {
  image?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['JSON']>;
  button?: InputMaybe<NamePotentialuserPotentialusersButtonMutation>;
};

export type NamePotentialuserMutation = {
  sectiontitle?: InputMaybe<Scalars['String']>;
  sectionid?: InputMaybe<Scalars['String']>;
  potentialusers?: InputMaybe<Array<InputMaybe<NamePotentialuserPotentialusersMutation>>>;
};

export type NameOtherproductsProductlogoMutation = {
  productlogo?: InputMaybe<Scalars['String']>;
};

export type NameOtherproductsMutation = {
  productlogo?: InputMaybe<Array<InputMaybe<NameOtherproductsProductlogoMutation>>>;
};

export type NameFooterctoCtobuttonMutation = {
  buttontext?: InputMaybe<Scalars['String']>;
  buttonlink?: InputMaybe<Scalars['String']>;
};

export type NameFooterctoMutation = {
  cto?: InputMaybe<Scalars['String']>;
  sectionid?: InputMaybe<Scalars['String']>;
  ctobutton?: InputMaybe<NameFooterctoCtobuttonMutation>;
};

export type NameMutation = {
  hero?: InputMaybe<NameHeroMutation>;
  usecases?: InputMaybe<NameUsecasesMutation>;
  banners?: InputMaybe<Array<InputMaybe<NameBannersMutation>>>;
  features?: InputMaybe<NameFeaturesMutation>;
  servicestest?: InputMaybe<NameServicestestMutation>;
  ourapproach?: InputMaybe<NameOurapproachMutation>;
  potentialuser?: InputMaybe<NamePotentialuserMutation>;
  otherproducts?: InputMaybe<NameOtherproductsMutation>;
  footercto?: InputMaybe<NameFooterctoMutation>;
};

export type FormcallbackFormfieldMutation = {
  name?: InputMaybe<Scalars['String']>;
  placeholder?: InputMaybe<Scalars['String']>;
  error?: InputMaybe<Scalars['String']>;
};

export type FormcallbackMutation = {
  title?: InputMaybe<Scalars['JSON']>;
  formfield?: InputMaybe<Array<InputMaybe<FormcallbackFormfieldMutation>>>;
};

export type ImpressumMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['JSON']>;
};

export type AuthorPartsFragment = { __typename?: 'Author', name?: string | null, avatar?: string | null };

export type NavbarPartsFragment = { __typename?: 'Navbar', navbar?: { __typename: 'NavbarNavbar', logo?: Array<{ __typename: 'NavbarNavbarLogo', link?: string | null, logo?: string | null } | null> | null, navitems?: Array<{ __typename: 'NavbarNavbarNavitems', menutitle?: string | null, menulink?: string | null } | null> | null, navbuttons?: Array<{ __typename: 'NavbarNavbarNavbuttons', buttontitle?: string | null, buttonlink?: string | null } | null> | null } | null };

export type FooterPartsFragment = { __typename?: 'Footer', logo?: string | null, address?: { __typename: 'FooterAddress', title?: string | null, companyname?: string | null, companystreet?: string | null, companycity?: string | null, companycountry?: string | null } | null, otherdata?: Array<{ __typename: 'FooterOtherdata', title?: string | null, body?: Array<{ __typename: 'FooterOtherdataBody', item?: string | null, itemlink?: string | null, itemtag?: string | null } | null> | null } | null> | null };

export type NamePartsFragment = { __typename?: 'Name', hero?: { __typename: 'NameHero', herotitle?: string | null, sectionid?: string | null, herosubtitle?: string | null, herodescription?: any | null, heroimage?: string | null, herobutton?: Array<{ __typename: 'NameHeroHerobutton', buttontitle?: string | null, buttonlink?: string | null } | null> | null } | null, usecases?: { __typename: 'NameUsecases', sectiontitle?: string | null, sectionid?: string | null, sideimage?: string | null, usecases?: Array<{ __typename: 'NameUsecasesUsecases', title?: string | null, description?: any | null } | null> | null } | null, banners?: Array<{ __typename: 'NameBanners', title?: string | null, content?: any | null, bannerImage?: string | null } | null> | null, features?: { __typename: 'NameFeatures', sectiontitle?: string | null, sectionid?: string | null, topimage?: string | null, features?: Array<{ __typename: 'NameFeaturesFeatures', icon?: string | null, title?: string | null, subtitle?: string | null, description?: any | null } | null> | null } | null, servicestest?: { __typename: 'NameServicestest', sectiontitle?: string | null, services?: Array<{ __typename: 'NameServicestestServices', title?: string | null, description?: any | null } | null> | null } | null, ourapproach?: { __typename: 'NameOurapproach', sectiontitle?: string | null, sectionid?: string | null, sideimage?: string | null, ourapproach?: Array<{ __typename: 'NameOurapproachOurapproach', title?: string | null, description?: any | null } | null> | null } | null, potentialuser?: { __typename: 'NamePotentialuser', sectiontitle?: string | null, sectionid?: string | null, potentialusers?: Array<{ __typename: 'NamePotentialuserPotentialusers', image?: string | null, title?: string | null, description?: any | null, button?: { __typename: 'NamePotentialuserPotentialusersButton', buttontext?: string | null, buttonlink?: string | null } | null } | null> | null } | null, otherproducts?: { __typename: 'NameOtherproducts', productlogo?: Array<{ __typename: 'NameOtherproductsProductlogo', productlogo?: string | null } | null> | null } | null, footercto?: { __typename: 'NameFootercto', cto?: string | null, sectionid?: string | null, ctobutton?: { __typename: 'NameFooterctoCtobutton', buttontext?: string | null, buttonlink?: string | null } | null } | null };

export type FormcallbackPartsFragment = { __typename?: 'Formcallback', title?: any | null, formfield?: Array<{ __typename: 'FormcallbackFormfield', name?: string | null, placeholder?: string | null, error?: string | null } | null> | null };

export type ImpressumPartsFragment = { __typename?: 'Impressum', title?: string | null, description?: any | null };

export type AuthorQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type AuthorQuery = { __typename?: 'Query', author: { __typename?: 'Author', id: string, name?: string | null, avatar?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type AuthorConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
}>;


export type AuthorConnectionQuery = { __typename?: 'Query', authorConnection: { __typename?: 'AuthorConnection', totalCount: number, edges?: Array<{ __typename?: 'AuthorConnectionEdges', node?: { __typename?: 'Author', id: string, name?: string | null, avatar?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type NavbarQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type NavbarQuery = { __typename?: 'Query', navbar: { __typename?: 'Navbar', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, navbar?: { __typename: 'NavbarNavbar', logo?: Array<{ __typename: 'NavbarNavbarLogo', link?: string | null, logo?: string | null } | null> | null, navitems?: Array<{ __typename: 'NavbarNavbarNavitems', menutitle?: string | null, menulink?: string | null } | null> | null, navbuttons?: Array<{ __typename: 'NavbarNavbarNavbuttons', buttontitle?: string | null, buttonlink?: string | null } | null> | null } | null } };

export type NavbarConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
}>;


export type NavbarConnectionQuery = { __typename?: 'Query', navbarConnection: { __typename?: 'NavbarConnection', totalCount: number, edges?: Array<{ __typename?: 'NavbarConnectionEdges', node?: { __typename?: 'Navbar', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, navbar?: { __typename: 'NavbarNavbar', logo?: Array<{ __typename: 'NavbarNavbarLogo', link?: string | null, logo?: string | null } | null> | null, navitems?: Array<{ __typename: 'NavbarNavbarNavitems', menutitle?: string | null, menulink?: string | null } | null> | null, navbuttons?: Array<{ __typename: 'NavbarNavbarNavbuttons', buttontitle?: string | null, buttonlink?: string | null } | null> | null } | null } | null } | null> | null } };

export type FooterQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type FooterQuery = { __typename?: 'Query', footer: { __typename?: 'Footer', id: string, logo?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, address?: { __typename: 'FooterAddress', title?: string | null, companyname?: string | null, companystreet?: string | null, companycity?: string | null, companycountry?: string | null } | null, otherdata?: Array<{ __typename: 'FooterOtherdata', title?: string | null, body?: Array<{ __typename: 'FooterOtherdataBody', item?: string | null, itemlink?: string | null, itemtag?: string | null } | null> | null } | null> | null } };

export type FooterConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
}>;


export type FooterConnectionQuery = { __typename?: 'Query', footerConnection: { __typename?: 'FooterConnection', totalCount: number, edges?: Array<{ __typename?: 'FooterConnectionEdges', node?: { __typename?: 'Footer', id: string, logo?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, address?: { __typename: 'FooterAddress', title?: string | null, companyname?: string | null, companystreet?: string | null, companycity?: string | null, companycountry?: string | null } | null, otherdata?: Array<{ __typename: 'FooterOtherdata', title?: string | null, body?: Array<{ __typename: 'FooterOtherdataBody', item?: string | null, itemlink?: string | null, itemtag?: string | null } | null> | null } | null> | null } | null } | null> | null } };

export type NameQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type NameQuery = { __typename?: 'Query', name: { __typename?: 'Name', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'NameHero', herotitle?: string | null, sectionid?: string | null, herosubtitle?: string | null, herodescription?: any | null, heroimage?: string | null, herobutton?: Array<{ __typename: 'NameHeroHerobutton', buttontitle?: string | null, buttonlink?: string | null } | null> | null } | null, usecases?: { __typename: 'NameUsecases', sectiontitle?: string | null, sectionid?: string | null, sideimage?: string | null, usecases?: Array<{ __typename: 'NameUsecasesUsecases', title?: string | null, description?: any | null } | null> | null } | null, banners?: Array<{ __typename: 'NameBanners', title?: string | null, content?: any | null, bannerImage?: string | null } | null> | null, features?: { __typename: 'NameFeatures', sectiontitle?: string | null, sectionid?: string | null, topimage?: string | null, features?: Array<{ __typename: 'NameFeaturesFeatures', icon?: string | null, title?: string | null, subtitle?: string | null, description?: any | null } | null> | null } | null, servicestest?: { __typename: 'NameServicestest', sectiontitle?: string | null, services?: Array<{ __typename: 'NameServicestestServices', title?: string | null, description?: any | null } | null> | null } | null, ourapproach?: { __typename: 'NameOurapproach', sectiontitle?: string | null, sectionid?: string | null, sideimage?: string | null, ourapproach?: Array<{ __typename: 'NameOurapproachOurapproach', title?: string | null, description?: any | null } | null> | null } | null, potentialuser?: { __typename: 'NamePotentialuser', sectiontitle?: string | null, sectionid?: string | null, potentialusers?: Array<{ __typename: 'NamePotentialuserPotentialusers', image?: string | null, title?: string | null, description?: any | null, button?: { __typename: 'NamePotentialuserPotentialusersButton', buttontext?: string | null, buttonlink?: string | null } | null } | null> | null } | null, otherproducts?: { __typename: 'NameOtherproducts', productlogo?: Array<{ __typename: 'NameOtherproductsProductlogo', productlogo?: string | null } | null> | null } | null, footercto?: { __typename: 'NameFootercto', cto?: string | null, sectionid?: string | null, ctobutton?: { __typename: 'NameFooterctoCtobutton', buttontext?: string | null, buttonlink?: string | null } | null } | null } };

export type NameConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
}>;


export type NameConnectionQuery = { __typename?: 'Query', nameConnection: { __typename?: 'NameConnection', totalCount: number, edges?: Array<{ __typename?: 'NameConnectionEdges', node?: { __typename?: 'Name', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'NameHero', herotitle?: string | null, sectionid?: string | null, herosubtitle?: string | null, herodescription?: any | null, heroimage?: string | null, herobutton?: Array<{ __typename: 'NameHeroHerobutton', buttontitle?: string | null, buttonlink?: string | null } | null> | null } | null, usecases?: { __typename: 'NameUsecases', sectiontitle?: string | null, sectionid?: string | null, sideimage?: string | null, usecases?: Array<{ __typename: 'NameUsecasesUsecases', title?: string | null, description?: any | null } | null> | null } | null, banners?: Array<{ __typename: 'NameBanners', title?: string | null, content?: any | null, bannerImage?: string | null } | null> | null, features?: { __typename: 'NameFeatures', sectiontitle?: string | null, sectionid?: string | null, topimage?: string | null, features?: Array<{ __typename: 'NameFeaturesFeatures', icon?: string | null, title?: string | null, subtitle?: string | null, description?: any | null } | null> | null } | null, servicestest?: { __typename: 'NameServicestest', sectiontitle?: string | null, services?: Array<{ __typename: 'NameServicestestServices', title?: string | null, description?: any | null } | null> | null } | null, ourapproach?: { __typename: 'NameOurapproach', sectiontitle?: string | null, sectionid?: string | null, sideimage?: string | null, ourapproach?: Array<{ __typename: 'NameOurapproachOurapproach', title?: string | null, description?: any | null } | null> | null } | null, potentialuser?: { __typename: 'NamePotentialuser', sectiontitle?: string | null, sectionid?: string | null, potentialusers?: Array<{ __typename: 'NamePotentialuserPotentialusers', image?: string | null, title?: string | null, description?: any | null, button?: { __typename: 'NamePotentialuserPotentialusersButton', buttontext?: string | null, buttonlink?: string | null } | null } | null> | null } | null, otherproducts?: { __typename: 'NameOtherproducts', productlogo?: Array<{ __typename: 'NameOtherproductsProductlogo', productlogo?: string | null } | null> | null } | null, footercto?: { __typename: 'NameFootercto', cto?: string | null, sectionid?: string | null, ctobutton?: { __typename: 'NameFooterctoCtobutton', buttontext?: string | null, buttonlink?: string | null } | null } | null } | null } | null> | null } };

export type FormcallbackQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type FormcallbackQuery = { __typename?: 'Query', formcallback: { __typename?: 'Formcallback', id: string, title?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, formfield?: Array<{ __typename: 'FormcallbackFormfield', name?: string | null, placeholder?: string | null, error?: string | null } | null> | null } };

export type FormcallbackConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
}>;


export type FormcallbackConnectionQuery = { __typename?: 'Query', formcallbackConnection: { __typename?: 'FormcallbackConnection', totalCount: number, edges?: Array<{ __typename?: 'FormcallbackConnectionEdges', node?: { __typename?: 'Formcallback', id: string, title?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, formfield?: Array<{ __typename: 'FormcallbackFormfield', name?: string | null, placeholder?: string | null, error?: string | null } | null> | null } | null } | null> | null } };

export type ImpressumQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ImpressumQuery = { __typename?: 'Query', impressum: { __typename?: 'Impressum', id: string, title?: string | null, description?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ImpressumConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
}>;


export type ImpressumConnectionQuery = { __typename?: 'Query', impressumConnection: { __typename?: 'ImpressumConnection', totalCount: number, edges?: Array<{ __typename?: 'ImpressumConnectionEdges', node?: { __typename?: 'Impressum', id: string, title?: string | null, description?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const AuthorPartsFragmentDoc = gql`
    fragment AuthorParts on Author {
  name
  avatar
}
    `;
export const NavbarPartsFragmentDoc = gql`
    fragment NavbarParts on Navbar {
  navbar {
    __typename
    logo {
      __typename
      link
      logo
    }
    navitems {
      __typename
      menutitle
      menulink
    }
    navbuttons {
      __typename
      buttontitle
      buttonlink
    }
  }
}
    `;
export const FooterPartsFragmentDoc = gql`
    fragment FooterParts on Footer {
  logo
  address {
    __typename
    title
    companyname
    companystreet
    companycity
    companycountry
  }
  otherdata {
    __typename
    title
    body {
      __typename
      item
      itemlink
      itemtag
    }
  }
}
    `;
export const NamePartsFragmentDoc = gql`
    fragment NameParts on Name {
  hero {
    __typename
    herotitle
    sectionid
    herosubtitle
    herodescription
    herobutton {
      __typename
      buttontitle
      buttonlink
    }
    heroimage
  }
  usecases {
    __typename
    sectiontitle
    sectionid
    sideimage
    usecases {
      __typename
      title
      description
    }
  }
  banners {
    __typename
    title
    content
    bannerImage
  }
  features {
    __typename
    sectiontitle
    sectionid
    topimage
    features {
      __typename
      icon
      title
      subtitle
      description
    }
  }
  servicestest {
    __typename
    sectiontitle
    services {
      __typename
      title
      description
    }
  }
  ourapproach {
    __typename
    sectiontitle
    sectionid
    sideimage
    ourapproach {
      __typename
      title
      description
    }
  }
  potentialuser {
    __typename
    sectiontitle
    sectionid
    potentialusers {
      __typename
      image
      title
      description
      button {
        __typename
        buttontext
        buttonlink
      }
    }
  }
  otherproducts {
    __typename
    productlogo {
      __typename
      productlogo
    }
  }
  footercto {
    __typename
    cto
    sectionid
    ctobutton {
      __typename
      buttontext
      buttonlink
    }
  }
}
    `;
export const FormcallbackPartsFragmentDoc = gql`
    fragment FormcallbackParts on Formcallback {
  title
  formfield {
    __typename
    name
    placeholder
    error
  }
}
    `;
export const ImpressumPartsFragmentDoc = gql`
    fragment ImpressumParts on Impressum {
  title
  description
}
    `;
export const AuthorDocument = gql`
    query author($relativePath: String!) {
  author(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AuthorParts
  }
}
    ${AuthorPartsFragmentDoc}`;
export const AuthorConnectionDocument = gql`
    query authorConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String) {
  authorConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AuthorParts
      }
    }
  }
}
    ${AuthorPartsFragmentDoc}`;
export const NavbarDocument = gql`
    query navbar($relativePath: String!) {
  navbar(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...NavbarParts
  }
}
    ${NavbarPartsFragmentDoc}`;
export const NavbarConnectionDocument = gql`
    query navbarConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String) {
  navbarConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...NavbarParts
      }
    }
  }
}
    ${NavbarPartsFragmentDoc}`;
export const FooterDocument = gql`
    query footer($relativePath: String!) {
  footer(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...FooterParts
  }
}
    ${FooterPartsFragmentDoc}`;
export const FooterConnectionDocument = gql`
    query footerConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String) {
  footerConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...FooterParts
      }
    }
  }
}
    ${FooterPartsFragmentDoc}`;
export const NameDocument = gql`
    query name($relativePath: String!) {
  name(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...NameParts
  }
}
    ${NamePartsFragmentDoc}`;
export const NameConnectionDocument = gql`
    query nameConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String) {
  nameConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...NameParts
      }
    }
  }
}
    ${NamePartsFragmentDoc}`;
export const FormcallbackDocument = gql`
    query formcallback($relativePath: String!) {
  formcallback(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...FormcallbackParts
  }
}
    ${FormcallbackPartsFragmentDoc}`;
export const FormcallbackConnectionDocument = gql`
    query formcallbackConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String) {
  formcallbackConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...FormcallbackParts
      }
    }
  }
}
    ${FormcallbackPartsFragmentDoc}`;
export const ImpressumDocument = gql`
    query impressum($relativePath: String!) {
  impressum(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ImpressumParts
  }
}
    ${ImpressumPartsFragmentDoc}`;
export const ImpressumConnectionDocument = gql`
    query impressumConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String) {
  impressumConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ImpressumParts
      }
    }
  }
}
    ${ImpressumPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      author(variables: AuthorQueryVariables, options?: C): Promise<{data: AuthorQuery, variables: AuthorQueryVariables, query: string}> {
        return requester<{data: AuthorQuery, variables: AuthorQueryVariables, query: string}, AuthorQueryVariables>(AuthorDocument, variables, options);
      },
    authorConnection(variables?: AuthorConnectionQueryVariables, options?: C): Promise<{data: AuthorConnectionQuery, variables: AuthorConnectionQueryVariables, query: string}> {
        return requester<{data: AuthorConnectionQuery, variables: AuthorConnectionQueryVariables, query: string}, AuthorConnectionQueryVariables>(AuthorConnectionDocument, variables, options);
      },
    navbar(variables: NavbarQueryVariables, options?: C): Promise<{data: NavbarQuery, variables: NavbarQueryVariables, query: string}> {
        return requester<{data: NavbarQuery, variables: NavbarQueryVariables, query: string}, NavbarQueryVariables>(NavbarDocument, variables, options);
      },
    navbarConnection(variables?: NavbarConnectionQueryVariables, options?: C): Promise<{data: NavbarConnectionQuery, variables: NavbarConnectionQueryVariables, query: string}> {
        return requester<{data: NavbarConnectionQuery, variables: NavbarConnectionQueryVariables, query: string}, NavbarConnectionQueryVariables>(NavbarConnectionDocument, variables, options);
      },
    footer(variables: FooterQueryVariables, options?: C): Promise<{data: FooterQuery, variables: FooterQueryVariables, query: string}> {
        return requester<{data: FooterQuery, variables: FooterQueryVariables, query: string}, FooterQueryVariables>(FooterDocument, variables, options);
      },
    footerConnection(variables?: FooterConnectionQueryVariables, options?: C): Promise<{data: FooterConnectionQuery, variables: FooterConnectionQueryVariables, query: string}> {
        return requester<{data: FooterConnectionQuery, variables: FooterConnectionQueryVariables, query: string}, FooterConnectionQueryVariables>(FooterConnectionDocument, variables, options);
      },
    name(variables: NameQueryVariables, options?: C): Promise<{data: NameQuery, variables: NameQueryVariables, query: string}> {
        return requester<{data: NameQuery, variables: NameQueryVariables, query: string}, NameQueryVariables>(NameDocument, variables, options);
      },
    nameConnection(variables?: NameConnectionQueryVariables, options?: C): Promise<{data: NameConnectionQuery, variables: NameConnectionQueryVariables, query: string}> {
        return requester<{data: NameConnectionQuery, variables: NameConnectionQueryVariables, query: string}, NameConnectionQueryVariables>(NameConnectionDocument, variables, options);
      },
    formcallback(variables: FormcallbackQueryVariables, options?: C): Promise<{data: FormcallbackQuery, variables: FormcallbackQueryVariables, query: string}> {
        return requester<{data: FormcallbackQuery, variables: FormcallbackQueryVariables, query: string}, FormcallbackQueryVariables>(FormcallbackDocument, variables, options);
      },
    formcallbackConnection(variables?: FormcallbackConnectionQueryVariables, options?: C): Promise<{data: FormcallbackConnectionQuery, variables: FormcallbackConnectionQueryVariables, query: string}> {
        return requester<{data: FormcallbackConnectionQuery, variables: FormcallbackConnectionQueryVariables, query: string}, FormcallbackConnectionQueryVariables>(FormcallbackConnectionDocument, variables, options);
      },
    impressum(variables: ImpressumQueryVariables, options?: C): Promise<{data: ImpressumQuery, variables: ImpressumQueryVariables, query: string}> {
        return requester<{data: ImpressumQuery, variables: ImpressumQueryVariables, query: string}, ImpressumQueryVariables>(ImpressumDocument, variables, options);
      },
    impressumConnection(variables?: ImpressumConnectionQueryVariables, options?: C): Promise<{data: ImpressumConnectionQuery, variables: ImpressumConnectionQueryVariables, query: string}> {
        return requester<{data: ImpressumConnectionQuery, variables: ImpressumConnectionQueryVariables, query: string}, ImpressumConnectionQueryVariables>(ImpressumConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    let data = {};
    try {
      data = await client.request({
        query: doc,
        variables: vars,
      });
    } catch (e) {
      // swallow errors related to document creation
      console.warn("Warning: There was an error when fetching data");
      console.warn(e);
    }

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql" }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

